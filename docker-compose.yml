version: "3.8"

networks:
  stock-network:
    driver: bridge

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    networks:
      - stock-network
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    networks:
      - stock-network
    depends_on:
      - zookeeper
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    healthcheck:
      test:
        ["CMD", "kafka-topics", "--list", "--bootstrap-server", "kafka:9092"]
      interval: 10s
      timeout: 5s
      retries: 10

  postgres:
    image: postgres:14
    container_name: postgres
    networks:
      - stock-network
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5433:5432"
    volumes:
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    env_file:
      - .env

  airflow:
    build:
      context: .
      dockerfile: ./airflow/Dockerfile
    image: stock_pipeline-airflow
    networks:
      - stock-network
    depends_on:
      - kafka
      - postgres
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "8080:8080"
    environment:
      - LOAD_EXAMPLES=False
      - EXECUTOR=LocalExecutor
      - AIRFLOW_HOME=/opt/airflow
      - AIRFLOW_CONN_POSTGRES_DEFAULT=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    env_file:
      - .env

  producer_5min:
    build:
      context: ./producer_5min
    container_name: producer-5min
    image: stock_pipeline-producer-5min
    networks:
      - stock-network
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      TOPIC_NAME: stock_prices_5min
    restart: on-failure
    command: tail -f /dev/null
    env_file:
      - .env

  producer_daily:
    build:
      context: ./producer_daily
    container_name: producer-daily
    image: stock_pipeline-producer-daily    
    networks:
      - stock-network
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      TOPIC_NAME: stock_prices_daily
    restart: on-failure
    command: tail -f /dev/null
    env_file:
      - .env

  consumer_5min:
    build:
      context: ./consumer_5min
    container_name: consumer-5min
    image: stock_pipeline-consumer-5min
    networks:
      - stock-network
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      POSTGRES_HOST: postgres
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    restart: on-failure
    command: tail -f /dev/null
    env_file:
      - .env

  consumer_daily:
    build:
      context: ./consumer_daily
    container_name: consumer-daily
    image: stock_pipeline-consumer-daily
    networks:
      - stock-network
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      POSTGRES_HOST: postgres
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    restart: on-failure
    command: tail -f /dev/null
    env_file:
      - .env